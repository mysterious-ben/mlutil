name: Build Python Package

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
    paths-ignore:
      - README.md

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[nobuild]')"
    runs-on: ubuntu-latest
    name: Build and Test
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - name: Clone repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
    - name: Set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set version (based on commit hash or tag)
      id: vars
      run: echo "::set-output name=version::$(git rev-parse --short "$GITHUB_SHA")"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with isort (check only)
      run: |
        pip install isort==5.10.1
        isort . --check-only
    - name: Lint with black (check only)
      run: |
        pip install black==22.3.0
        black . --check
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --show-source --statistics
    - name: Lint with mypy
      run: |
        pip install mypy
        mypy . --ignore-missing-imports
    - name: Lint with pylint
      run: |
        pip install pylint==2.10.2
        pylint mlutil/ -E
    - name: Run test suite
      run: |
        pip install pytest==7.1.3
        pytest -vv -m "not integration"
    - name: Build python package
      run: |
        echo "Build package version $VERSION"
        pip install setuptools wheel
        python setup.py sdist bdist_wheel
      env:
        VERSION: ${{ steps.vars.outputs.version }}
